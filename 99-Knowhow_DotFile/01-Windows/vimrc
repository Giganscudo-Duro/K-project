" 実行ファイルの設定
" set shell=vimrun.exe
set shell=cmd.exe

" カレントディレクトリを変更
cd D:\Workspace\00-VimFiles

" 参考１：options - Vim 日本語ドキュメント
" https://vim-jp.org/vimdoc-ja/options.html


" [オリジナル挙動設定]=================================================
"{{{

" 基本設定 ============================================================
" vim による強制的な改行を無効化
set tw=0

" ヤンク値をクリップボードにセット
set clipboard=unnamed

" undo ファイルを作らせない
set noundofile

" バックアップファイルを作らない
" set nobackup

" スワップファイルを作らない
" set noswapfile

" 編集中のファイルが変更されたら自動で読み直す
" set autoread

" バッファが編集中でもその他のファイルを開けるようにする
" set hidden

" 入力中のコマンドをステータスに表示する
" set showcmd

" スペルチェックを有効に
set spell
set spelllang=en,cjk

" 文字エンコーディング
set encoding=utf-8
set fileencodings=iso-2022-jp,iso-2022-jp-2,utf-8,euc-jp,sjis

" カラーテーマを設定
" colorscheme torte

" エラー時にビープ音を鳴らさない
" set noerrorbells

" エラー時にビープ音ではなくビジュアルベル（画面フラッシュ）を使う
"set visualbell

" ベルを鳴らさないようにするイベントを指定する。今回は「all(全て)」を指定
set belloff=all

" vim利用中に保持したレジスタやら何やらをviminfoに保存する。
" 一応こんなのを設定できるらしい
" - コマンドライン履歴と検索履歴
" - レジスタ
" - マーク
" - バッファリスト
" - グローバル変数
" ただし、面倒なので何も指定しない
set viminfo=


" 折りたたみ関係 ======================================================
" 折りたたみを有効に
set foldmethod=marker

" 試験的に折りたたみ関数を差し替える
set foldtext=FoldCCtext()


" GUI Options 関係 ====================================================
" 詳細は、以下のヘルプで確認する
" :h guioptions
"
" オプション追加は「set guioptions+=XXX」
" オプション削除は「set guioptions-=XXX」

" gVimでのメニューバーを非表示にする
set guioptions-=m

" gVimでのツールバーを非表示にする
set guioptions-=T

" gVimでの左右のスクロールバーを非表示にする
" set guioptions-=r " 右スクロールバーを非表示に
" set guioptions-=l " 左スクロールバーを非表示に
" set guioptions-=R " 垂直分割されたウィンドウがあるときの右スクロールバーを非表示に
" set guioptions-=L " 垂直分割されたウィンドウがあるときの左スクロールバーを非表示に

" gVimでの水平スクロールバーを非表示にする
" set guioptions-=b


" 表示系 ==============================================================

" 行番号を表示
set nu

" カーソルラインの表示
set cursorline

" シンタックスハイライトを有効にする
syntax enable

" タブの半角空白数を４に
set tabstop=4

" タブを半角の空白に
set expandtab

" 全角空白をハイライトする
augroup highlightIdegraphicSpace
    autocmd!
    autocmd Colorscheme * highlight IdeographicSpace term=underline ctermbg=DarkGreen guibg=DarkGreen
    autocmd VimEnter,WinEnter * match IdeographicSpace /　/
augroup END


" 特定の文字を表示する。
" 詳細は :h listchars
"
" tab:      "タブ”の表示を決定する。値は 2 文字で指定し、タブがスペース 8 文字に当たる場合、“»-------”などと表示される。
" trail:    行末に続くスペースを表す表示。
" eol:      改行記号を表す表示。
" extends:  ウィンドウの幅が狭くて右に省略された文字がある場合に表示される。
" precedes: extends と同じで左に省略された文字がある場合に表示される。
" nbsp:     不可視のスペースを表す表示。ただし、この記号の通りに表示されるのは“&nbsp;”、
"           つまり、ノーブレークスペースに限られており、ほかの不可視スペースには効果がない。 
set list
set listchars=tab:\|\ ,trail:_


set colorcolumn=72

" 挙動系 - 検索 =======================================================

" 検索時に大文字小文字を無視（noignorecase:無視しない）
set ignorecase

" 検索時に大文字小文字の両方が含まれている場合は区別する
set smartcase

" 検索結果のハイライト関係
" ハイライトON
set hlsearch

" <Esc><Esc>でハイライトをOFF
nnoremap <Esc><Esc> :<C-u>set nohlsearch<CR>

" 「/」「?」「*」「#」が押されたらハイライトを有効にして検索開始
nnoremap / :<C-u>set hlsearch<CR>/
nnoremap ? :<C-u>set hlsearch<CR>?
nnoremap * :<C-u>set hlsearch<CR>*
nnoremap # :<C-u>set hlsearch<CR>#


" 挙動系 - 入力 =======================================================
" 入力されているテキストの最大幅
" 行がそれより長くなると、この幅を越えないように空白のあとで改行される
" 値を０に設定すると無効になる
" set textwidth=0
" set tw=0

" ７２文字までのライン表示＆自動改行１
" set textwidth=72
" if exists('&colorcolumn')
"     set colorcolumn=+1
" endif

" ７２文字までのライン表示＆自動改行２
" 設定内容：折り返し文字数を７２文字に設定し、その１文字あとに縦線を表示する
" set textwidth=72
" let &colorcolumn=&textwidth+1
"}}}









" [ステータスライン表示]===============================================
"{{{

" 詳細は以下のコマンドを実行
" :h statusline
" :h status-line  <-- laststatus の設定

" ファイル名表示
"   %f    バッファ内のファイルのパス(入力された通り、またはカレントディレクトリに対する相対パス)
"   %F    バッファ内のファイルのフルパス。
"   %t    バッファ内のファイルのファイル名 (パスを除く)。
set statusline=%t

" 半角スペース挿入
set statusline+=\ 

" 変更チェック表示
set statusline+=%m

" 読み込み専用かどうか表示
set statusline+=%r

" ヘルプページなら[HELP]と表示
set statusline+=%h

" プレビューウインドウなら[Prevew]と表示
set statusline+=%w

" これ以降は右寄せ表示
set statusline+=%=

" 意味無し
set statusline+=(^o^)

" 半角スペース挿入
set statusline+=\ 

" file encoding
set statusline+=[ENC=%{&fileencoding}]

" 現在行数/全行数
set statusline+=[Line=%l/%L]


" ステータスライン表示設定
"   'laststatus' = 0	常にステータス行を表示しない。
"   'laststatus' = 1	ウィンドウが2つ以上ある場合に表示する。
"   'laststatus' = 2	常にステータス行を表示する。
set laststatus=2

"}}}


" [タブ関係の挙動設定]=================================================
"{{{

" タブ関係の独自関数設定はここを参考：http://thinca.hatenablog.com/entry/20111204/1322932585

" タブページを常に表示
set showtabline=2

" gVimでもテキストベースのタブ管理を行う
set guioptions-=e

"}}}


" [キーマッピング]=====================================================
"{{{

" カーソル移動関係==========
" カーソルを表示行で移動できるようにする
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk


" タブ移動関係 =============
" 左のタブに移動
nnoremap <C-h> :tabprevious<CR>
" 右のタブに移動
nnoremap <C-l> :tabnext<CR>
" C-l でタブリストを表示
" → C-lには別の役割を割り当てたので終息
" inoremap <C-l> <Esc>:tabs<CR>
" noremap <C-l> <Esc>:tabs<CR>


" QuickFix 移動関係=============================
nnoremap <C-n> :cnext<CR>
nnoremap <C-p> :cprevious<CR>


" xキーでの文字削除 =============================
" 通常xキーでも字を削除するとヤンクの内容が上書きされるが
" xキーで文字を削除したときにヤンクした内容を消えないようにする
noremap PP "0p
noremap x "_x


"}}}


" [オートイベント] ====================================================
" {{{

" QuickFix Window関連
" vimgrep に自動で cw コマンドを追加する
autocmd QuickFixCmdPost vimgrep cwindow

" }}}


" [C-k でのエスケープから実行できるオリジナルショートカット] ==========
" {{{
" # で始まっている目次をリストアップする
nnoremap <C-K>toc :vimgrep "^# " %<CR>

" 画面を問答無用でリプレッシュする
map <C-K>init :enew!<CR>

"フォント設定画面を開く
map <C-K>font :set guifont=*<CR>


" }}}


" [C-k でのエスケープから実行できるオリジナルコマンド(自作関数)] ======
" {{{


"【独自の関数を作る際の雛形】
""{{{
" function! KanaNewFunction()
"     echo "Call KanaNewFunction"
"     "====準備部分
"     " 外部コマンド実行時のシェルを強制的に変更する。
"     set shell=cmd.exe
"     " 利用する外部プログラムのパスを '"XXXX"' という形式で指定する
"     let s:browser = '"C:\Program Files (x86)\Internet Explorer\iexplore.exe"'
"     "====実装部分
"     " カーソルラインの文字列から何かを取得するならこれを使う
"     let s:link = matchstr(getline("."), 'https\=:\/\/[^ >,;:]*\|sm[0-9]\+')
"     なにか実行する内容を記述
"     "====事後処理
"     " 外部コマンド実行時に変更したシェルをもとに戻す
"     set shell=vimrun.exe
"     " 利用した変数を開放する
"     unlet s:link
" endfunction
" "}}}
" " ==== 上記関数の呼び出し
" map <C-K>ie :call KanaNewFunction()<CR>


"【URLをFireFoxで開く】
""{{{
function! KanaBrowserFF()
    echo "Call KanaBrowserFF"
    set shell=cmd.exe
    let s:browser = '"C:\Program Files (x86)\Mozilla Firefox\firefox.exe"'
    " URLパターン(^\を区切りとして追加)
    "   通常のURL     https\=:\/\/[^ >,;:]*   http:// もしくは https:// で始ま
    "   ニコニコ動画  sm[0-9]\+               sm で始まり、半角数字が１回以上繰り返される
    let s:link = matchstr(getline("."), 'https\=:\/\/[^ >,;:]*\|sm[0-9]\+')
    if match(s:link, "^http")==0
        echo "Pattern:[http]"
        call vimproc#popen2(s:browser . " " . s:link)
    elseif match(s:link, "^sm")==0
        echo "Pattern:[niconico]"
        let s:link = "http://www.nicovideo.jp/watch/" . s:link
        call vimproc#popen2(s:browser . " " . s:link)
    else
        echo "No URI found in line"
    endif
    set shell=vimrun.exe
    unlet s:link
endfunction
"}}}
" ==== 上記関数の呼び出し
map <C-K>ff :call KanaBrowserFF()<CR>


"【URLをIEで開く】
""{{{
function! KanaBrowserIE()
    echo "Call KanaBrowserIE"
    "====準備部分
    " 外部コマンド実行時のシェルを強制的に変更する。
    set shell=cmd.exe
    " 利用するブラウザのパスを '"XXXX"' という形式で指定する
    let s:browser = '"C:\Program Files (x86)\Internet Explorer\iexplore.exe"'
    " カーソルラインの文字列から取得する URLパターンを指定する。(複数指定する場合は ^\ で区切って指定する)
    "   通常のURL     https\=:\/\/[^ >,;:]*   http:// もしくは https:// で始ま
    "   ニコニコ動画  sm[0-9]\+               sm で始まり、半角数字が１回以上繰り返される
    let s:link = matchstr(getline("."), 'https\=:\/\/[^ >,;:]*\|sm[0-9]\+')
    " 取得したURLパターンから、実際にブラウザに渡すURLを生成する（ｓｍXXXXXとかだけ）
    if match(s:link, "^http")==0
        echo "Pattern:[http]"
        call vimproc#popen2(s:browser . " " . s:link)
    elseif match(s:link, "^sm")==0
        echo "Pattern:[niconico]"
        let s:link = "http://www.nicovideo.jp/watch/" . s:link
        call vimproc#popen2(s:browser . " " . s:link)
    else
        echo "No URI found in line"
    endif
    set shell=vimrun.exe
    unlet s:link
endfunction
"}}}
" ==== 上記関数の呼び出し
map <C-K>ie :call KanaBrowserIE()<CR>


"【規定のプログラムでファイルを開く】
"{{{
function! KanaOpenFile()
    echo "Call Kana-OpenFile-Ver3"
    set shell=cmd.exe
    " netrw 画面である回安価を判断する
    let s:flag = stridx(getline(2), '" Netrw Directory Listing      ')
    if s:flag == -1
        if match(s:tmp, "^D:")==0
            echo 'Open FilePath'
            let s:file = substitute(s:tmp, "\\", "/", "g")
            call vimproc#popen2("start" . " " . "" . " " . s:file)
            unlet s:flag
            unlet s:tmp
            unlet s:file
        else
            echo "No FilePath found in line..."
        endif
    else
        echo 'Open NetrwPath'
        let s:name = getline(".")
        let s:dir = substitute(getline(3), '"   ', "", "g")
        let s:tmp = s:dir . '/' . s:name
        let s:file = substitute(s:tmp, "\\", "/", "g")
        call vimproc#popen2("start" . " " . "" . " " . s:file)
        unlet s:name
        unlet s:dir
        unlet s:flag
        unlet s:tmp
        unlet s:file
    endif
    set shell=vimrun.exe
endfunction
" }}}
" ==== 上記関数の呼び出し
map <C-K>op :call KanaOpenFile()<CR>


"【ゆたぽんフォントで印刷する】
"{{{
function! KanaYutaponPrint()
    echo "Call KanaYutaponPrint"
    set printfont=ゆたぽん（コーディング）:h12:cSHIFTJIS
    hardcopy
    set printfont=Migu_1M:h12:cSHIFTJIS
endfunction
"}}}
" ==== 上記関数の呼び出し
map <C-K>print :call KanaYutaponPrint()<CR>


" }}}



